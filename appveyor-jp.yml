os: Visual Studio 2017
version: "{branch}-{build}"

environment:
 PY_PYTHON: 3.7-32
 my_secret_a:
  secure: kPfHlAOr4ZcGv/XCSRBeainjAYGaqsTMU6+mMvgXOMg=
 my_secret_b:
  secure: neMaHS4sUE44BxKyxNgaTcCnK663C88hNtG75ALxzoE=

clone_depth: 1

init:
 - ps: Set-WinSystemLocale ja-JP
 - ps: Start-Sleep -s 10
 - ps: Restart-Computer
 - ps: Start-Sleep -s 10
 - ps: |
    $pythonVersion = (py --version)
    echo $pythonVersion

install:
 - set PATH=%PATH%;C:\MinGW;C:\MinGW\bin;C:\MinGW\msys\1.0
 - git submodule update --init --recursive
 - nuget install secure-file -ExcludeVersion
 - secure-file\tools\secure-file -decrypt jptools\secret\knowlec-key181024c.pfx.enc -secret %my_secret_a%
 - secure-file\tools\secure-file -decrypt jptools\secret\knowlec-key-pass-2018.txt.enc -secret %my_secret_b%

build_script:
 - set RELEASE=1
 - set VERSION=jpalpha
 - set UPDATEVERSIONTYPE=nvdajp
 - for /F "usebackq" %%t in (`jptools\nowdate.cmd`) do set NOWDATE=%%t
 - set VERSION=%VERSION%_%NOWDATE%
 - set UPDATEVERSIONTYPE=%UPDATEVERSIONTYPE%alpha
 - set PUBLISHER=nvdajp
 - echo %PUBLISHER% %UPDATEVERSIONTYPE% %VERSION%
 - ps: |
    $apiVersion = (py -c "import sys; sys.path.append('source'); from addonAPIVersion import CURRENT; print('{}.{}.{}'.format(*CURRENT))")
    echo apiversion: $apiVersion
    $apiCompatTo = (py -c "import sys; sys.path.append('source'); from addonAPIVersion import BACK_COMPAT_TO; print('{}.{}.{}'.format(*BACK_COMPAT_TO))")
    echo apiBackCompatTo: $apiCompatTo
 - ps: |
     $sconsArgs = "version_build=$env:APPVEYOR_BUILD_NUMBER"
     Set-AppveyorBuildVariable "sconsArgs" $sconsArgs
 - 'echo jptools\kcCertAllBuild.cmd %sconsArgs%'
 - jptools\kcCertAllBuild.cmd %sconsArgs%
 - cd jptools
 - pack_jtalk_addon.cmd
 - pack_kgs_addon.cmd
 - cd ..

before_test:
 # install required packages
 - py -m pip install -r tests/system/requirements.txt
 - mkdir testOutput
 - mkdir testOutput\unit
 - mkdir testOutput\system
 - ps: |
     $errorCode=0
     $nvdaLauncherFile=".\output\nvda"
     if(!$env:release) {
      $nvdaLauncherFile+="_snapshot"
     }
     $nvdaLauncherFile+="_${env:version}.exe"
     echo NVDALauncherFile: $NVDALauncherFile
     $outputDir=$(resolve-path .\testOutput)
     $installerLogFilePath="$outputDir\nvda_install.log"
     $installerProcess=start-process -FilePath "$nvdaLauncherFile" -ArgumentList "--install-silent --debug-logging --log-file $installerLogFilePath" -passthru
     try {
      $installerProcess | wait-process -Timeout 180
      $errorCode=$installerProcess.ExitCode
     } catch {
      echo NVDA installer process timed out
      $errorCode=1
     }
     Push-AppveyorArtifact $installerLogFilePath
     if($errorCode -ne 0) { $host.SetShouldExit($errorCode) }

test_script:
 - ps: |
     $errorCode=0
     $outDir = (Resolve-Path .\testOutput\unit\)
     $unitTestsXml = "$outDir\unitTests.xml"
     py -m nose -sv --with-xunit --xunit-file="$unitTestsXml" ./tests/unit
     if($LastExitCode -ne 0) { $errorCode=$LastExitCode }
     Push-AppveyorArtifact $unitTestsXml
     $wc = New-Object 'System.Net.WebClient'
     $wc.UploadFile("https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)", $unitTestsXml)
     if($errorCode -ne 0) { $host.SetShouldExit($errorCode) }
 - ps: |
     $testOutput = (Resolve-Path .\testOutput\)
     $systemTestOutput = (Resolve-Path "$testOutput\system")
     $testSource = "./tests/system"
     py -m robot --loglevel DEBUG -d $systemTestOutput -x systemTests.xml -v whichNVDA:installed -P "$testSource/libraries" "$testSource"
     Compress-Archive -Path "$systemTestOutput\*" -DestinationPath "$testOutput\systemTestResult.zip"
     Push-AppveyorArtifact "$testOutput\systemTestResult.zip"
     if($LastExitCode -ne 0) { $errorCode=$LastExitCode }
     $wc = New-Object 'System.Net.WebClient'
     $wc.UploadFile("https://ci.appveyor.com/api/testresults/junit/$($env:APPVEYOR_JOB_ID)", (Resolve-Path "$systemTestOutput\systemTests.xml"))
     if($errorCode -ne 0) { $host.SetShouldExit($errorCode) }
 - jptools\tests.cmd

artifacts:
 - path: output\*
 - path: output\*\*
 - path: miscDepsJp\jptools\__h1output.txt
 - path: miscDepsJp\jptools\__h2output.txt
 - path: miscDepsJp\jptools\__test_log.txt
 - path: jptools\__jpdictest_log.txt
 - path: jptools\nvdajp-jtalk-*.nvda-addon
 - path: jptools\kgsbraille-*.nvda-addon