//NVDAControler_appModuleHelper.idl

/**
 * Allows the controling of NVDA from a remote process
 */
[
uuid(ec0ac5e3-de3f-49dc-b9d8-571abd7ddd92),
version(1.0),
]
interface NVDAControler {

/**
 * Retreaves the version of NVDA.
 * @param version  a pointer to the version string, must be freed when finnished with
 */
void getNVDAVersionString([out,string] char** version);

	typedef [context_handle] void* inprocWorkerHandle_t;
/**
 * Registers an inprocWorker rpc server with NVDA
 * @param processID the ID of the process the inproc worker is for
 * @param address address of the rpc server
 * @return a handle which can be later used to unregister the inproc worker
 */
	inprocWorkerHandle_t registerInprocWorker([in] int processID, [in,string] const char* address);

/**
 * Unregisters an inproc worker in NVDA
 * @param inprocWorkerHandle a handle previously gotten by registerInprocWorker
 */
	void unregisterInprocWorker([in] inprocWorkerHandle_t* inprocWorkerHandle);

/**
 * Executes an event on an appModule in NVDA
 * @param processID the ID of the process the appModule is associated with
 * @param event the python expression representing the event and its parameters
 * @return 0 on success
 */
	int executeAppModuleEvent([in] int processID, [in,string] const char* event);

}
